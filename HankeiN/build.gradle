apply plugin: 'android'

dependencies {
    compile "com.jakewharton:butterknife:$butterknifeVersion"
    compile "com.google.android.gms:play-services:$playServicesVersion"
    compile "com.android.support:appcompat-v7:$supportPackageVersion"
}


def writeApiKeys(HashMap<String, String> dict) {
    def s = ""
    s += """<?xml version="1.0" encoding="utf-8"?>\n<resources>\n"""
    dict.each { key, value ->
        s += """<string name="$key">$value</string>\n"""
    }
    s += """</resources>\n"""

    def file = project.file("src/main/res/values/_api_keys.xml")
    logger.info("writing $file ...")
    file.write(s)
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.1"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
    }

    compileOptions {
        encoding = "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        release {
            def keystore = file(project.ext.ReleaseStoreFile.replaceAll("~", System.getenv("HOME")))
            if (keystore.exists()) {
                storeFile keystore
                storePassword project.ext.ReleaseStorePassword
                keyAlias project.ext.ReleaseKeyAlias
                keyPassword project.ext.ReleaseKeyPassword
            }
            else {
                logger.log(LogLevel.WARN, "keystore ${keystore} does not exist.")
            }
        }
    }

    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'

            signingConfig signingConfigs.release
        }

        debug {
            packageNameSuffix ".debug"
            versionNameSuffix "-debug"
        }
    }

    lintOptions {
        disable 'InvalidPackage'
        //abortOnError false
    }
}

android.applicationVariants.all { variant ->
    variant.mergeResources.dependsOn {
        switch (variant.buildType.name) {
            case "release":
                writeApiKeys("GoogleApiKey" : GoogleApiKey_Release)
                break
            case "debug":
                writeApiKeys("GoogleApiKey" : GoogleApiKey_Debug)
                break
        }
    }
}