apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply plugin: 'android-power-assert'

rootProject.ext.properties.each { key, value ->
    if (!project.ext.has(key)) {
        project.ext.set(key, value)
    }
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 22

        def version = readVersion(rootProject.file("VERSION"))
        versionCode version.toVersionCode()
        versionName version.toVersionName()
    }

    compileOptions {
        encoding = "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        release {
            storeFile file(project.ext.ReleaseStoreFile.replaceAll("~", System.getenv("HOME")))
            storePassword project.ext.ReleaseStorePassword
            keyAlias project.ext.ReleaseKeyAlias
            keyPassword project.ext.ReleaseKeyPassword
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'

            if (signingConfigs.release.storeFile.exists()) {
                signingConfig signingConfigs.release
            } else {
                logger.info("keystore ${signingConfigs.release.storeFile} does not exist. Release signing is ignored.")
            }
        }

        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }
    }

    lintOptions {
        disable 'InvalidPackage'
        disable 'AppCompatResource'
    }
}


dependencies {
    compile 'com.jakewharton:butterknife:+'
    compile 'com.google.android.gms:play-services:+'
    compile 'com.android.support:support-annotations:+'
    compile 'com.android.support:appcompat-v7:+'
    compile 'com.google.code.findbugs:jsr305:+'
}

makeGrayscaleLauncherIcon(file("src/main"), "ic_launcher.png")

android.applicationVariants.all { variant ->
    variant.mergeResources.dependsOn {
        def resourceFile = file("src/main/res/values/_api_keys.xml")
        switch (variant.buildType.name) {
            case "release":
                writeResources(resourceFile, ["GoogleApiKey": GoogleApiKey_Release])
                break
            case "debug":
                writeResources(resourceFile, ["GoogleApiKey": GoogleApiKey_Debug])
                break
        }
    }
}
