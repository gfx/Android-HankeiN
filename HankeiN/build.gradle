apply plugin: 'android'

rootProject.ext.properties.each { key, value ->
    if (!project.ext.has(key)) {
        project.ext.set(key, value)
    }
}

dependencies {
    compile "com.jakewharton:butterknife:4.0.+"
    compile "com.google.android.gms:play-services:4.0.+"
    compile "com.android.support:appcompat-v7:19.0.+"

    compile fileTree(dir: 'libs', include: '*.jar')
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.3"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 19

        def version = readVersion(file("VERSION"))
        versionCode version.toVersionCode()
        versionName version.toVersionName()
    }

    compileOptions {
        encoding = "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        release {
            storeFile file(project.ext.ReleaseStoreFile.replaceAll("~", System.getenv("HOME")))
            storePassword project.ext.ReleaseStorePassword
            keyAlias project.ext.ReleaseKeyAlias
            keyPassword project.ext.ReleaseKeyPassword
        }
    }

    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'

            if (signingConfigs.release.storeFile.exists()) {
                signingConfig signingConfigs.release
            } else {
                logger.info("keystore ${keystore} does not exist. Release signing is ignored.")
            }
        }

        debug {
            packageNameSuffix ".debug"
            versionNameSuffix "-debug"
        }
    }

    lintOptions {
        disable 'InvalidPackage'
        //abortOnError false
    }
}

makeGrayscaleLauncherIcon(file("src/main"), "ic_launcher.png")

android.applicationVariants.all { variant ->
    variant.mergeResources.dependsOn {
        def resourceFile = file("src/main/res/values/_api_keys.xml")
        switch (variant.buildType.name) {
            case "release":
                writeResources(resourceFile, ["GoogleApiKey": GoogleApiKey_Release])
                break
            case "debug":
                writeResources(resourceFile, ["GoogleApiKey": GoogleApiKey_Debug])
                break
        }
    }
}
